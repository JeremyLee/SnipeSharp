using namespace System.IO

PARAM (
    [Parameter(Mandatory = $true, Position = 0)]
    [ValidateNotNull()]
    [DirectoryInfo]$Directory
)
# TODO: /accessories
#           GET /{id}/checkedout
#           POST /{id}/checkout
#           POST /{id}/checkin
#           GET /
#           GET /{id}
#           POST /
#           PATCH /{id}
#           DELETE /{id}

@"
// Generated by accessories.ps1 at $(Get-Date -Format 'G')
namespace SnipeSharp.Tests
{
    internal static partial class Resources
    {
        internal static class Accessories
        {
            internal const string Individual = "./Resources/Integration/GET_accessories.OneItem.json";
            internal const string GetAll_PartOne = "./Resources/Integration/GET_accessories.PartOne.json";
            internal const string GetAll_PartTwo = "./Resources/Integration/GET_accessories.PartTwo.json";
            internal const string Create_Ok = "./Resource/Integration/POST_accessories.CreateOk.json";
            internal const string Create_MissingName = "./Resources/Integration/POST_accessories.CreateMissingName.json";
            internal const string Create_NameTooShort = "./Resources/Integration/POST_accessories.CreateNameTooShort.json";
            internal const string Create_NameTooLong = "./Resources/Integration/POST_accessories.CreateNameTooLong.json";
            internal const string Create_MissingQuantity = "./Resources/Integration/POST_accessories.CreateMissingQuantity.json";
            internal const string Create_QuantityTooSmall = "./Resources/Integration/POST_accessories.CreateQuantityTooSmall.json";
            internal const string Create_MissingCategory = "./Resources/Integration/POST_accessories.CreateMissingCategory.json";
            internal const string Create_InvalidCategory = "./Resources/Integration/POST_accessories.CreateInvalidCategory.json";
            internal const string Update_Ok = "./Resource/Integration/PATCH_accessories.UpdateOk.json";
            internal const string Update_NotExist = "./Resource/Integration/PATCH_accessories.UpdateNotExist.json";
            internal const string Update_MissingName = "./Resources/Integration/PATCH_accessories.UpdateMissingName.json";
            internal const string Update_NameTooShort = "./Resources/Integration/PATCH_accessories.UpdateNameTooShort.json";
            internal const string Update_NameTooLong = "./Resources/Integration/PATCH_accessories.UpdateNameTooLong.json";
            internal const string Update_MissingQuantity = "./Resources/Integration/PATCH_accessories.UpdateMissingQuantity.json";
            internal const string Update_QuantityTooSmall = "./Resources/Integration/PATCH_accessories.UpdateQuantityTooSmall.json";
            internal const string Update_MissingCategory = "./Resources/Integration/PATCH_accessories.UpdateMissingCategory.json";
            internal const string Update_InvalidCategory = "./Resources/Integration/PATCH_accessories.UpdateInvalidCategory.json";
            internal const string Delete = "./Resources/Integration/DELETE_accessories.json";
            internal const string GetCheckedOut = "./Resources/Integration/GET_accessories_checkedout.json;
            internal const string CheckOut = "./Resources/Integration/POST_accessories_checkout.json";
            internal const string CheckOut_UserNotExist = "./Resources/Integration/POST_accessories_checkout.UserNotExist.json";
            internal const string CheckIn = "./Resources/Integration/POST_accessories_checkin.json";
            internal const string CheckIn_UpdateName = "./Resources/Integration/POST_accessories_checkin.UpdateName.json";
        }
    }
}

"@ -replace "`r`n", "`n" | Out-File -Encoding 'UTF8' -NoNewline -LiteralPath (Join-Path -Path $Directory.FullName -ChildPath 'Resources.Account.cs')
